/// TLE FOR GEO1
#include<iostream>
#include<algorithm>
#include<bitset>
#include<cctype>
#include<cmath>
#include<complex>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<climits>
#include<functional>
#include<fstream>
#include<istream>
#include<iterator>
#include<iomanip>
#include<list>
#include<map>
#include<numeric>
#include<queue>
#include<set>
#include<sstream>
#include<stack>
#include<string>
#include<utility>
#include<vector>

#include<bits/stdc++.h>

/// LOOP///

#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define RFOR(i,a,b) for(int i=(b-1);i>=(a);i--)
#define REP(i,n) for(int i=0;i<(n);i++)
#define RREP(i,n) for(int i=(n)-1;i>=0;i--)


///  STL //


#define INF INT_MAX
#define pb push_back
#define MP make_pair
#define ALL(a) (a).begin(),(a).end()
#define SET(a,c) memset(a,c,sizeof a)
#define CLR(a) memset(a,0,sizeof a)
#define PII pair<int,int>
#define PCC pair<char,char>
#define PIC pair<int,char>
#define PCI pair<char,int>
#define F first
#define S second
#define VS vector<string>
#define VI vector<int>
#define DEBUG(x) cout<<#x<<": "<<x<<endl
#define MIN(a,b) (a>b?b:a)
#define MAX(a,b) (a>b?a:b)


///  GEO AND TRIGONOMETRTY  ///

#define PI          acos(-1.0)
#define RADIANS(x)  (((1.0*x*PI)/180.0))
#define DEGREES(x)  (((x * 180.0) / (1.0 * PI)))
#define SINE(x)     (sin(RADIANS(x)))
#define COSINE(x)   (cos(RADIANS(x)))
#define TANGENT(x)  (tan(RADIANS(x)))
#define ARCSINE(x)   DEGREES(asin(x))
#define ARCCOSINE(x) (DEGREES((acos(x))))
#define ARCTANGENT(x) (DEGREES((atan(x))))

///  BITWISE MANIPULATION ///

#define SETBIT(x,i) (x|=(1<<i))  ///SET korte korte jay    0 indexing
#define RESETBIT(x, i) (x &=(~(1 << i)))  ///    ???????  ???


/// INPUT-OUTPUT
#define scn scanf
#define pnt printf
#define SI(a) scanf("%d",&a)
#define SL(a) scanf("%lld",&a)
#define SD(a) scanf("%lf",&a)
#define OI(a) printf("%d",a)
#define OL(a) printf("%lld",a)
#define OD(a) printf("%lf",a)


/// FILE

#define INPUT freopen("input.txt","r",stdin);
#define OUTPUT freopen("output.txt","w",stdout);
#define FAST ios_base::sync_with_stdio(0);cin.tie();

/// DATA TYPE  ///
#define LL long long
#define ULL unsigned long long
#define EPS 1e-9
#define MOD 1000000007

/// MATH
// template<typename T>inline T  SQ(T a){return a*a;}
// template<typename T>inline T GCD(T a, T b){if (b == 0)return a;else return GCD(b, a % b);}
// template<typename T>inline T LCM(T a, T b){LL res=a*b; res/=GCD(a,b);return res;}
// template<typename T>inline ULL BIGMOD(T a, T b, T m){if (b == 0)return 1;else if (b % 2 == 0)return SQ(BIGMOD(a, b / 2, m)) % m;else return (a % m*BIGMOD(a, b - 1, m)) % m;}
// template<typename T>inline VS PARSE(T str){VS res;string s;istringstream os(str);while(os>>s)res.PB(s);return res;}
// template<typename T>inline ULL  DIST(T A,T B){ULL res=(A.x-B.x)*(A.x-B.x)+(A.y-B.y)*(A.y-B.y);return res;}
// template<typename T>inline LL  CROSS(T A,T B,T C){return (B.x-A.x)*(C.y-A.y)-(C.x-A.x)*(B.y-A.y);}
// template<typename T>inline double cosAngle(T a,T b,T c){double res=a*a+b*b-c*c;res=res/(2*a*b);res=acos(res);return res;}
// template<typename T>inline T POWER(T base,int po){T res=1;if(base==0)return 0;FOR(i,0,po)res*=base;return res;}
//BIT
// template<typename T>inline bool IS_ON(T mask,T pos){return mask&(1<<pos);}
// template<typename T>inline int OFF(T mask,T pos){return mask^(1<<pos);}
// template<typename T>inline int ON(T mask,T pos){return mask|(1<<pos);}

//MOVEMENT INSIDE GRID
// template<typename T>inline bool isValid(int R,int C,int ro,int clm){if(R>=0&&C>=0&&R<ro&&C<clm)return 1;return 0;}


// ypor nich dan bam
//int dx[]= {0,0,1,-1};
//int dy[]= {-1,1,0,0};

// knight  //
//int dx[]= {2,2,-2,-2,1,-1,1,-1};
//int dy[]= {1,-1,1,-1,2,2,-2,-2};

// KING // adjcent 8 ta

//int dx[]= {0,0,1,1,1,-1,-1,-1};
//int dy[]= {1,-1,1,0,-1,0,1,-1};


using namespace std;
int main()
{


}
